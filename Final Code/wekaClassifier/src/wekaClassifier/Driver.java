package wekaClassifier;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;

import weka.classifiers.trees.J48;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.converters.ConverterUtils.DataSource;
import weka.core.*;


//import weka.classifiers.trees.J48;
//import weka.core.Attribute;
//import weka.core.Instance;
//import weka.core.Instances;
//import weka.core.converters.ArffSaver;
//import weka.core.converters.ConverterUtils.DataSource;

public class Driver 
{
	/**
	 * @param args
	 */
	// /Users/srishti/Desktop/Code/codeFiles/
	//public static String dSet1 = "/Users/srishti/Desktop/Code/codeFiles/dataSet1.csv";
	public static String dSet2 = "/Users/srishti/Desktop/Code/codeFiles/dataSet2.csv";
	
	public static void main(String[] args)
	{
		
		List<String> classifyObj = new ArrayList<String>();
		classifyObj.add("/Users/srishti/Desktop/Code/codeFiles/classify.arff");
		classifyObj.add("/Users/srishti/Desktop/Code/codeFiles/classify1.arff");
		classifyObj.add("/Users/srishti/Desktop/Code/codeFiles/classify3.arff");
		
		
		List<String> detectedObj = new ArrayList<String>();
		
		//new arffConverter().convert();
		
		System.out.println("*****************************START PHASE 1*******************************\n");
		int classiCount = 0;
		
		//for each string in classifyObj
		for(String str : classifyObj)
		{
			classiCount++;
			System.out.println("CLASSIFICATION " + classiCount + " -- ");
			try
			{
				String dataSourceFileName = "/Users/srishti/Desktop/Code/codeFiles/dataSet1.arff";
				DataSource dSource = new DataSource(dataSourceFileName);
				Instances data = dSource.getDataSet();

				if (data.classIndex() == -1)
				{
					data.setClassIndex(data.numAttributes() - 1);
				}
				
				J48 tTree = new J48();
				
				String[] options = new String[1];
				//unpruned
				options[0] = "-U";            
				tTree.setOptions(options);
				
				//builds tree here from data
				tTree.buildClassifier(data);
								
				
				
				
				//read from file to classify
				DataSource dSource1 = new DataSource(str);
				Instances data1 = dSource1.getDataSet();
				
				if (data1.classIndex() == -1)
				{
					data1.setClassIndex(data1.numAttributes() - 1);
				}
					
				String inst = null;
				
				for(int i = 0; i < data1.numInstances(); i++)
				{
					Instance ins = data1.instance(i);
					
					double clsLabel = tTree.classifyInstance(ins);
					
					data1.instance(i).setClassValue(clsLabel);
					//now data1 has category
					
					inst = data1.instance(i).toString(8);
					//inst would be the category
					
					List<String> lis = new ArrayList<String>();
					populateLisCatName obj = new populateLisCatName();
					//lis will have all category names corresponding to detected category
					lis = obj.populate(lis, inst);
					
					// add all category names to detected object file
					Attribute atr = new Attribute("CategoryName", lis);
					data1.insertAttributeAt(atr, 9);
					//data1 is file which is derived from classify and has the category names of the detected category
					
					System.out.println("Detected Category is: " + inst);
					System.out.println("Intermediate classification completed.\n");
				}
				
				// save ARFF
			    /*ArffSaver saver = new ArffSaver();
			    saver.setInstances(data1);
			    File f  = new File("/Users/srishti/Desktop/Code/codeFiles/classify_temp.arff");
			    if(f.exists() && !f.isDirectory())
			    {
			    	f.delete();
			    }
			    saver.setFile(f);
			    saver.writeBatch();*/
				
				// save ARFF
		        BufferedWriter writer = new BufferedWriter(new FileWriter("/Users/srishti/Desktop/Code/codeFiles/classify_temp.arff"));
		        writer.write(data1.toString());
		        writer.flush();
		        writer.close();
				
			    
			    String tempFName = "/Users/srishti/Desktop/Code/codeFiles/temp.arff";
			    //narrow file basically returns the row entries which contain the category same as the detected category
			    // temp file is generated by the narrowFile containing only values corresponding to the detected category
			    narrowFile nf = new narrowFile();
			    nf.createFile(dSet2, inst);
			    nf.convertToArff();
			    
			    DataSource dSourceTemp = new DataSource(tempFName);
			    Instances dataTemp = dSourceTemp.getDataSet();
			    if (dataTemp.classIndex() == -1)
				{
					dataTemp.setClassIndex(dataTemp.numAttributes() - 1);
				}
			    
			    
			    //build classifier again for original data
				J48 tTree_ori = new J48();
				
				String[] options_ori = new String[1];
				options_ori[0] = "-U";            
				tTree_ori.setOptions(options_ori);
				
				tTree_ori.buildClassifier(dataTemp);
				//System.out.println("Tree created for Final data. \n\n");
				dSource = null;
				
			    //read from file to classify
				DataSource dSource2 = new DataSource("/Users/srishti/Desktop/Code/codeFiles/classify_temp.arff");
				Instances data2 = dSource2.getDataSet();
				
				if (data2.classIndex() == -1)
				{
					data2.setClassIndex(data2.numAttributes() - 1);
				}

				for(int i = 0; i < data2.numInstances(); i++)
				{
					Instance ins_ori = data2.instance(i);
					double lbl = tTree_ori.classifyInstance(ins_ori);
					data2.instance(i).setClassValue(lbl);
					
					String inst1 = data2.instance(i).toString(9);
					//herer we'll have category name
					System.out.println("Detected Subcategory  is: " + inst1);
					detectedObj.add(inst1);
					//detected object is a list containing  category names of all detected objects
					System.out.println("Final classification completed. \n");
				}
				
				/*
				 * if,
				 * the detected categories are the same, then do further classification
				 * 
				 * 
				 * else,
				 * 
				 */
			}
			catch(Exception ex)
			{
				ex.printStackTrace();
			}
		}
		System.out.println("Done with classification of detected objects.");
		System.out.println("*****************************END OF PHASE 1*******************************\n\n");
		
		
		System.out.println("*****************************START - DECISION MAKING*****************************\n");
		System.out.println("Checking priority list, making decision.");
		
		//Decision making
		checkPriorityList ck = new checkPriorityList();
		String kill = ck.result(detectedObj);
		
		
		System.out.println("Car will hit: " + kill);
		System.out.println("*****************************END - DECISION MAKING*******************************\n\n");
	}
}
